"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var toolBoxXml = '';
toolBoxXml += '<xml>';
var definitions_1 = require("./basic/definitions");
var generators_1 = require("./basic/generators");
definitions_1.default(Blockly.Blocks);
generators_1.default(Blockly.Python);
toolBoxXml += fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'blocks', 'basic', 'toolbox.xml'));
var definitions_2 = require("./minecraft/definitions");
var generators_2 = require("./minecraft/generators");
definitions_2.default(Blockly.Blocks);
generators_2.default(Blockly.Python);
toolBoxXml += fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'blocks', 'minecraft', 'toolbox.xml'));
var definitions_3 = require("./gpiozero/definitions");
var generators_3 = require("./gpiozero/generators");
definitions_3.default(Blockly.Blocks);
generators_3.default(Blockly.Python);
toolBoxXml += fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'blocks', 'gpiozero', 'toolbox.xml'));
var definitions_4 = require("./sonicpi/definitions");
var generators_4 = require("./sonicpi/generators");
definitions_4.default(Blockly.Blocks);
generators_4.default(Blockly.Python);
toolBoxXml += fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'blocks', 'sonicpi', 'toolbox.xml'));
var definitions_5 = require("./pimoroni/definitions");
var generators_5 = require("./pimoroni/generators");
definitions_5.default(Blockly.Blocks);
generators_5.default(Blockly.Python);
toolBoxXml += fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'blocks', 'pimoroni', 'toolbox.xml'));
var definitions_6 = require("./advanced/definitions");
var generators_6 = require("./advanced/generators");
definitions_6.default(Blockly.Blocks);
generators_6.default(Blockly.Python);
toolBoxXml += fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'blocks', 'advanced', 'toolbox.xml'));
var definitions_7 = require("./bitio/definitions");
var generators_7 = require("./bitio/generators");
definitions_7.default(Blockly.Blocks);
generators_7.default(Blockly.Python);
toolBoxXml += fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'blocks', 'bitio', 'toolbox.xml'));
var definitions_8 = require("./turtle/definitions");
var generators_8 = require("./turtle/generators");
definitions_8.default(Blockly.Blocks);
generators_8.default(Blockly.Python);
toolBoxXml += fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'blocks', 'turtle', 'toolbox.xml'));
var definitions_9 = require("./sensehat/definitions");
var generators_9 = require("./sensehat/generators");
definitions_9.default(Blockly.Blocks);
generators_9.default(Blockly.Python);
toolBoxXml += fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'blocks', 'sensehat', 'toolbox.xml'));
var definitions_10 = require("./crickit/definitions");
var generators_10 = require("./crickit/generators");
definitions_10.default(Blockly.Blocks);
generators_10.default(Blockly.Python);
toolBoxXml += fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'blocks', 'crickit', 'toolbox.xml'));
var definitions_11 = require("./smartrover/definitions");
var generators_11 = require("./smartrover/generators");
definitions_11.default(Blockly.Blocks);
generators_11.default(Blockly.Python);
toolBoxXml += fs.readFileSync(path.join(__dirname, '..', '..', 'src', 'blocks', 'smartrover', 'toolbox.xml'));
toolBoxXml += '</xml>';
function getToolBoxXml() {
    return toolBoxXml;
}
exports.getToolBoxXml = getToolBoxXml;
